package com.example.gittestapplication.data.model

import com.example.gittestapplication.domain.model.Repository

data class RepositoryResponse(
    val id: Int?,
    val url: String?,
    val name: String?,
    val fullName: String?,
    val owner: OwnerResponse?,
    val allowForking: Boolean?,
    val archiveUrl: String?,
    val archived: Boolean?,
    val assigneesUrl: String?,
    val blobsUrl: String?,
    val branchesUrl: String?,
    val cloneUrl: String?,
    val collaboratorsUrl: String?,
    val commentsUrl: String?,
    val commitsUrl: String?,
    val compareUrl: String?,
    val contentsUrl: String?,
    val contributorsUrl: String?,
    val createdAt: String?,
    val defaultBranch: String?,
    val deploymentsUrl: String?,
    val description: String?,
    val disabled: Boolean?,
    val downloadsUrl: String?,
    val eventsUrl: String?,
    val fork: Boolean?,
    val forks: Int?,
    val forksCount: Int?,
    val forksUrl: String?,
    val gitCommitsUrl: String?,
    val gitRefsUrl: String?,
    val gitTagsUrl: String?,
    val gitUrl: String?,
    val hasDownloads: Boolean?,
    val hasIssues: Boolean?,
    val hasPages: Boolean?,
    val hasProjects: Boolean?,
    val hasWiki: Boolean?,
    val homepage: String?,
    val hooksUrl: String?,
    val htmlUrl: String?,
    val isTemplate: Boolean?,
    val issueCommentUrl: String?,
    val issueEventsUrl: String?,
    val issuesUrl: String?,
    val keysUrl: String?,
    val labelsUrl: String?,
    val language: Any?,
    val languagesUrl: String?,
    val license: Any?,
    val mergesUrl: String?,
    val milestonesUrl: String?,
    val mirrorUrl: Any?,
    val nodeId: String?,
    val notificationsUrl: String?,
    val openIssues: Int?,
    val openIssuesCount: Int?,
    val `private`: Boolean?,
    val pullsUrl: String?,
    val pushedAt: String?,
    val releasesUrl: String?,
    val score: Double?,
    val size: Int?,
    val sshUrl: String?,
    val stargazersCount: Int?,
    val stargazersUrl: String?,
    val statusesUrl: String?,
    val subscribersUrl: String?,
    val subscriptionUrl: String?,
    val svnUrl: String?,
    val tagsUrl: String?,
    val teamsUrl: String?,
    val topics: List<String>?,
    val treesUrl: String?,
    val updatedAt: String?,
    val visibility: String?,
    val watchers: Int?,
    val watchersCount: Int?
)

fun RepositoryResponse.toEntity(): Repository? {
    return Repository(
        id ?: return null,
        url ?: return null,
        name ?: return null,
        owner?.toEntity() ?: return null,
        allowForking,
        archiveUrl,
        archived,
        assigneesUrl,
        blobsUrl,
        branchesUrl,
        cloneUrl,
        collaboratorsUrl,
        commentsUrl,
        commitsUrl,
        compareUrl,
        contentsUrl,
        contributorsUrl,
        createdAt,
        defaultBranch,
        deploymentsUrl,
        description,
        disabled,
        downloadsUrl,
        eventsUrl,
        fork,
        forks,
        forksCount,
        forksUrl,
        fullName,
        gitCommitsUrl,
        gitRefsUrl,
        gitTagsUrl,
        gitUrl,
        hasDownloads,
        hasIssues,
        hasPages,
        hasProjects,
        hasWiki,
        homepage,
        hooksUrl,
        htmlUrl,
        isTemplate,
        issueCommentUrl,
        issueEventsUrl,
        issuesUrl,
        keysUrl,
        labelsUrl,
        language,
        languagesUrl,
        license,
        mergesUrl,
        milestonesUrl,
        mirrorUrl,
        nodeId,
        notificationsUrl,
        openIssues,
        openIssuesCount,
        private,
        pullsUrl,
        pushedAt,
        releasesUrl,
        score,
        size,
        sshUrl,
        stargazersCount,
        stargazersUrl,
        statusesUrl,
        subscribersUrl,
        subscriptionUrl,
        svnUrl,
        tagsUrl,
        teamsUrl,
        topics,
        treesUrl,
        updatedAt,
        visibility,
        watchers,
        watchersCount
    )
}